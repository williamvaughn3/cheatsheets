First, lets break down the apk

java -jar apktool_2.1.1.jar d <apkname.apk>

Now, let's break down the apk again to get the classes.dex and turn it into a .jar file.

./dj2-dex2jar.sh <apkname.apk> -o <output-file.jar>

Now lets run JD-GUI, select the <output-file.jar> from above, and run it.  This will help decompile some code that is very similar to the original source code.


java -jar baksmali-2.1.1.jar <dex-file.dex>

After running this command, the output results will be placed into a directory called out.

java -jar smali-2.1.1.jar source-directory-containing-smali-code/

This will Take the smali code and turn it into a dex file

1. Run dex2jar as seen above, and turn the apk into a . jar file ./dj2-dex2jar.sh <apkname.apk> -o <output-file.jar>

2. Use apktool to retrieve the AndroidManifest.xml file java -jar apktool_2.1.1.jar d <apkname.apk>

3. Look at the AndroidManifest.xml file and gather some information about the app.  Look at the permissions and intents.  IE - Intenet permission etc etc. keywords - files, access, user, password

4. When you find something interesting in the AndroidManifest.xml file, load the <output-file.jar> from above usage with dex2jar, with JD-GUI and check the contents of your juicy file you found in step 3

5. 